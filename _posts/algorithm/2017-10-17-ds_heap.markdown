---
layout: post
title:  "Data structure: heap"
date:   2017-10-18 11:17:01 +0800
categories: algorithm
---
***Heap***




## what is heap

堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点

初始化堆：

首先是对adjustHeap函数的理解，该函数使用的前提为：下标范围 >=start && <end 范围内属于start（不包含start）下标元素子节点的元素构成的树形结构满足对的性质。这样，可以保证调整下标为start的元素至适当位置。

```c++
void adjustHeap(int arr[], int start, int end){
    int parent = start;
    int child = parent*2+1;
    int tmp;
    while(child < end){
        if(child+1 < end && arr[child] < arr[child+1]){
            child++;
        }
        if(arr[parent] >= arr[child]){
            return;
        }
        tmp = arr[parent];
        arr[parent] = arr[child];
        arr[child] = tmp;
        parent = child;
        child = parent*2+1;
    }
}
```

自底向上，对每个非叶子结点进行操作，由于开始的结点一定只有一层子节点，所以保证了其子节点满足堆的性质。自底向上的过程则可以保证后续的操作是在其子节点已满足堆的性质的前提下进行的。

```c++
// ensure all non-leaf node
void initHeap(int arr[], int len){
    for(int i = len/2-1; i >= 0; i--){
        adjustHeap(arr, i, len);
    }
}
```
由于堆顶为最大或者最小值，因此每次将最值取出，将末尾元素替换至堆顶，然后执行调整。取出的序列为有序序列。这里用到了小技巧，可以充分利用内存。

```c++
// shrink heap size, put heap top to tail, form a sorted array
void heapSort(int arr[], int len){
    int tmp;
    initHeap(arr, len);
    for(int i = len-1; i > 0; i--){
        tmp = arr[0];
        arr[0] = arr[i];
        arr[i] = tmp;
        adjustHeap(arr, 0, i);
    }
}
```

堆顶为最值，将最值取出。堆大小减一，需要将末尾值放至堆顶进行调整操作。

```c++
// put last element to the top, return top
int heapPop(int arr[], int n){
    int ret = arr[0];
    arr[0] = arr[n-1];
    adjustHeap(arr, 0, n-1);
    return ret;
}
```
将新元素放到末尾，进行类似冒泡处理。由于从叶结点到根结点是有序的，所以可以保证调整的正确性。

```c++
// append new element to end, then bubble it up (the bubble up path is sorted)
void heapPush(int arr[], int n, int num){
    int parent, child = n, tmp;
    arr[n] = num;
    while(child > 0){
        parent = (child-1)/2;
        if(arr[parent] > arr[child]){
            break;
        }else{
            tmp = arr[parent];
            arr[parent] = arr[child];
            arr[child] = tmp;
            child = parent;
        }
    }
}
```

完整代码见[这里][lct heap]

## 总结

1、堆是完全二叉树

2、最小堆满足父节点的值小于其子节点的值

3、最大堆满足父节点的值大于其子节点的值

4、使用最大堆排序，排序后的序列递增

5、使用最小堆排序，排序后的序列递减


[lct heap]: https://github.com/hanjianqiao/lct-utils/blob/master/src/sample_algorithm/heap.c